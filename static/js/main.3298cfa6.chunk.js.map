{"version":3,"sources":["components/Card/Card.js","components/Card/CardList.js","components/SearchBox/SearchBox.js","components/Scroll/Scroll.js","components/ErrorBoundry/ErrorBoundry.js","components/Header/Header.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","id","name","email","link","className","alt","src","title","href","CardList","cardArray","robots","map","robot","i","console","log","key","SearchBox","onSearchChange","aria-label","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","errorInfo","this","setState","Component","Header","nextProps","nextState","App","onRequestRobots","searchField","isPending","filteredRobots","filter","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","axios","get","then","axiosData","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.3298cfa6.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\r\n\r\nconst Card = ({ id, name, email, link }) => {\r\n  return (\r\n    <Fragment>\r\n      <article className=\"dib mw5 bg-light-green br3 pa3 pa4-ns mv3 ba b--black-10 ma2 bw1 shadow-5 grow\">\r\n        <div className=\"tc\">\r\n          <img alt='card-img' src={`https://robohash.org/${id}?200x200`} className=\"br-100 h4 w4 dib ba b--black-05 pa2 bg-white\" title=\"Photo of a kitty staring at you\" />\r\n          <h1 className=\"f3 mb2\">{name}</h1>\r\n          <h2 className=\"f5 fw4 gray mt0\">{email}</h2>\r\n          <a className=\"link tc ph3 pv1 db bg-animate bg-dark-blue hover-bg-blue white f6 br1 ma3 grow\" href={link}>Link</a>\r\n        </div>\r\n      </article>\r\n    </Fragment>\r\n  )\r\n};\r\n\r\nexport default Card;\r\n","import React, { Fragment } from 'react';\r\nimport Card from './Card';\r\nconst CardList = ({ robots }) => {\r\n    // if(true){\r\n    //     throw new Error('NOOOOOOOOOOOO')\r\n    // }\r\n    const cardArray = robots.map((robot, i) => {\r\n        console.log('CardList')\r\n        return (\r\n            <Card key={robot.id} id={robot.id} name={robot.name} email={robot.email} link={robot.link} />\r\n        )\r\n    })\r\n    return (\r\n        <Fragment>\r\n        <div>\r\n            {cardArray}\r\n        </div>\r\n        </Fragment>\r\n    )\r\n};\r\n\r\nexport default CardList;","import React, {Fragment} from 'react';\r\n\r\nconst SearchBox = ({onSearchChange}) => {\r\n  console.log('SearchBox')\r\n  return (\r\n    <Fragment>\r\n    \r\n    <div className=\"pa2\">\r\n        <input aria-label='Search Robots' className=\"pa3 ba b--green bg-lightest-blue\" type=\"search\" placeholder=\"search robots\" onChange={onSearchChange} />\r\n   </div>\r\n   \r\n    </Fragment>\r\n  )\r\n};\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\n\r\nconst Scroll=(props)=>{\r\n    \r\n    return(\r\n        <div className='' style={{overflowY:'scroll',border:'3px solid black', height:'800px'}}>\r\n        {props.children}\r\n        </div>\r\n    )  \r\n}\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\n\r\nclass ErrorBoundry extends Component{\r\nconstructor(props){\r\n    super(props);\r\n    this.state={\r\n        hasError:false\r\n    }\r\n}\r\n\r\ncomponentDidCatch(error,errorInfo){\r\nthis.setState({hasError:true})\r\n}\r\n\r\n    render(){\r\n        if(this.state.hasError){\r\n            return <h1>Oooops!. This is not good!</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React,{Component} from 'react';\r\n\r\nclass Header extends Component {\r\n  \r\n    shouldComponentUpdate(nextProps,nextState){\r\n        return false;\r\n    };\r\n\r\n    \r\n    render(){\r\n        console.log('Header')\r\n        return(\r\n            <h1 className=\"f1 app-header-text\">Senior Robo Friends</h1>\r\n        )\r\n    }\r\n};\r\n\r\nexport default Header;","import React, { Component, Fragment } from \"react\";\r\nimport {connect} from 'react-redux';\r\nimport \"./App.css\";\r\nimport CardList from \"../components/Card/CardList\";\r\nimport SearchBox from \"../components/SearchBox/SearchBox\";\r\nimport Scroll from \"../components/Scroll/Scroll\";\r\nimport ErrorBoundry from '../components/ErrorBoundry/ErrorBoundry';\r\nimport Header from '../components/Header/Header';\r\nimport axios from \"axios\";\r\n\r\nimport {setSearchField,requestRobots } from '../actions';\r\n\r\nconst mapStateToProps=state=>{\r\n  return{\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps=(dispatch)=>{\r\n  return {\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n}\r\n}\r\n\r\nclass App extends Component {\r\n  // constructor() {\r\n  //   super();\r\n  //   this.state = {\r\n  //     robots: []\r\n  //   };\r\n  // }\r\n  //////////////async AXIOS Call ///////////////////////////\r\n  // getUser = async (event) => {\r\n  //   try {\r\n  //     const response = await axios.get(\r\n  //       \"https://jsonplaceholder.typicode.com/users\"\r\n  //     );\r\n\r\n  //     const users = response.data;\r\n  //     this.setState({ robots: users });\r\n  //   } catch (error) {\r\n  //     console.error(error);\r\n  //   }\r\n  // };\r\n\r\n  componentDidMount() {\r\n\r\n\r\n    this.props.onRequestRobots();\r\n  //   fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n  //     .then((response) => response.json())\r\n  //     .then((users) => this.setState({ robots: users }));\r\n  }\r\n\r\n  // onSearchChange = (event) => {\r\n  //   this.setState({ searchField: event.target.value });\r\n  // };\r\n\r\n  render() {\r\n    const { robots, searchField, onSearchChange, isPending } = this.props;\r\n\r\n    const filteredRobots = robots.filter((robot) => {\r\n      return robot.name\r\n        .toLowerCase()\r\n        .includes(searchField.toLowerCase());\r\n    });\r\n\r\n    if (isPending) {\r\n      return (\r\n        <Fragment>\r\n        <div className=\"tc\">\r\n        <Header />\r\n        <SearchBox onSearchChange={onSearchChange} />\r\n        <Scroll>\r\n              <ErrorBoundry>\r\n              <h1 className=\"f1 app-header-text\">Loading!</h1>\r\n              </ErrorBoundry>\r\n            </Scroll>\r\n      \r\n      </div>\r\n      </Fragment>\r\n      \r\n      );\r\n    } else {\r\n      return (\r\n        <Fragment>\r\n          <div className=\"tc\">\r\n          <Header />\r\n            <SearchBox onSearchChange={onSearchChange} />\r\n            <Scroll>\r\n              <ErrorBoundry>\r\n              <CardList robots={filteredRobots} />\r\n              </ErrorBoundry>\r\n            </Scroll>\r\n          </div>\r\n        </Fragment>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(App);\r\n","import axios from 'axios';\r\nimport { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n\r\n} from './constants';\r\n\r\nexport const setSearchField=(text)=>{\r\n    // console.log(text)\r\n    return {\r\n    type:CHANGE_SEARCH_FIELD,\r\n    payload:text\r\n}}\r\n\r\n\r\nexport const requestRobots=()=>(dispatch)=>{\r\n    dispatch({type:REQUEST_ROBOTS_PENDING})\r\n    axios.get(\"https://jsonplaceholder.typicode.com/users\")\r\n    .then(axiosData=>dispatch({type:REQUEST_ROBOTS_SUCCESS,payload:axiosData.data}))\r\n    .catch(error=>dispatch({type:REQUEST_ROBOTS_FAILED,payload:error}))\r\n}","export const CHANGE_SEARCH_FIELD=\"CHANGE_SEARCH_FIELD\";\r\n\r\nexport const REQUEST_ROBOTS_PENDING=\"REQUEST_ROBOTS_PENDING\";\r\nexport const REQUEST_ROBOTS_SUCCESS=\"REQUEST_ROBOTS_SUCCESS\";\r\nexport const REQUEST_ROBOTS_FAILED=\"REQUEST_ROBOTS_FAILED\";\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n    switch (action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, { searchField: action.payload })\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    robots: [],\r\n    isPending: true\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n    switch (action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { isPending: true })\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, { robots: action.payload, isPending: false })\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, { error: action.payload })\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Provider, connect} from 'react-redux';\r\nimport {createStore, combineReducers, applyMiddleware} from 'redux';\r\n\r\nimport {createLogger} from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport './index.css';\r\nimport \"tachyons\";\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { requestRobots, searchRobots } from './reducers'\r\n\r\n\r\n\r\n\r\nconst logger=createLogger();\r\nconst rootReducer=combineReducers({searchRobots, requestRobots})\r\nconst store=createStore(rootReducer, applyMiddleware(thunkMiddleware,logger));\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n    <App  />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}